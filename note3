import os
import zipfile

def extract_packages(jar_path):
    packages = set()

    with zipfile.ZipFile(jar_path, 'r') as jar_file:
        for entry in jar_file.namelist():
            if entry.endswith('.class'):
                # Extracting the package from the class file path
                package = entry.rsplit('/', 1)[0].replace('/', '.')
                packages.add(package)

    return packages

def find_duplicate_packages(jar_directory):
    jar_files = [f for f in os.listdir(jar_directory) if f.endswith('.jar')]
    packages_mapping = {}

    for jar_file in jar_files:
        jar_path = os.path.join(jar_directory, jar_file)
        packages = extract_packages(jar_path)

        for package in packages:
            if package in packages_mapping:
                packages_mapping[package].append(jar_file)
            else:
                packages_mapping[package] = [jar_file]

    duplicate_packages = {pkg: jars for pkg, jars in packages_mapping.items() if len(jars) > 1}
    return duplicate_packages

if __name__ == "__main__":
    jar_directory = "/path/to/your/java/repo"
    duplicate_packages = find_duplicate_packages(jar_directory)

    if duplicate_packages:
        print("Duplicate packages found:")
        for package, jars in duplicate_packages.items():
            print(f"Package: {package}, JARs: {', '.join(jars)}")
    else:
        print("No duplicate packages found.")
