task checkDuplicatePackages {
    doLast {
        def jarFiles = fileTree(buildDir).include('**/*.jar').files
        def packageOccurrences = [:]
        def duplicatePackages = [:]

        jarFiles.each { jarFile ->
            def zip = new java.util.zip.ZipFile(jarFile)
            zip.entries().each { entry ->
                if (entry.name.endsWith(".class")) {
                    def packageName = entry.name.replaceAll("/", ".").replace(".class", "")
                    def packageKey = "$packageName@$jarFile"
                    packageOccurrences[packageKey] = (packageOccurrences[packageKey] ?: 0) + 1
                    if (packageOccurrences[packageKey] > 1) {
                        duplicatePackages[packageName] = (duplicatePackages[packageName] ?: []) + jarFile
                    }
                }
            }
            zip.close()
        }

        duplicatePackages.each { packageName, jars ->
            println "Duplicate package found: $packageName in JAR files: $jars"
        }

        if (duplicatePackages.isEmpty()) {
            println "No duplicate packages found."
        }
    }
}
